version: "3.8"
services:

  gateway:
    image: nginx:1.19.8-alpine
#    build:
#      context: ./services/Gateway
#      dockerfile: Dockerfile
    ports:
      - 8080:8080
    networks:
      - servers
    volumes:
      - ./Gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./Gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
    depends_on:
      - auth-service
      - user-service
      - post-service

  auth-service:
    #image: danijelradakovic/kitchen-service
    image: auth-service
    build:
      context: ../Nistagram-Auth
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
    restart: on-failure
    networks:
      - servers
    ports:
      - 9000:8080
    environment:
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}

      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA_AUTH}
    depends_on:
      - database

  user-service:
    #image: danijelradakovic/consumer-service
    image: user-service
    build:
      context: ../Nistagram-user-service
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
    restart: on-failure
    networks:
      - servers
    ports:
      - 9001:8080
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA_USER}
    depends_on:
      - database

  post-service:
    #image: danijelradakovic/kitchen-service
    image: post-service
    build:
      context: ../Nistagram-post-service
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
    restart: on-failure
    networks:
      - servers
    ports:
      - 9002:8080
    environment:
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}

      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA_POST}
    depends_on:
      - database

  agent-service:
    #image: danijelradakovic/kitchen-service
    image: agent-service
    build:
      context: ../nistagram-agent-service
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
    restart: on-failure
    networks:
      - servers
    ports:
      - 9003:8080
    environment:
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}

      POST_SERVICE_DOMAIN: ${POST_SERVICE_DOMAIN}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}

      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA_AGENT}
    depends_on:
      - database

  admin-service:
    #image: danijelradakovic/kitchen-service
    image: admin-service
    build:
      context: ../Nistagram-admin-service
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
    restart: on-failure
    networks:
      - servers
    ports:
      - 9004:8080
    environment:
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}

      POST_SERVICE_DOMAIN: ${POST_SERVICE_DOMAIN}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}

      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA_ADMIN}
    depends_on:
      - database

  database:
    image: mysql:${MYSQL_VERSION:-8.0.19}
    container_name: mysql
    restart: always
    networks:
      - servers
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - database-data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d

  frontend:
    build:
      context: ../Nistagram-front
      dockerfile: Dockerfile
    image: nistagram-frontend
    restart: on-failure
    networks:
      - servers
    ports:
      - 4200:4200

volumes:
  database-data:
    name: nistagram-database

networks:
  servers:
    name: servers
    driver: bridge
